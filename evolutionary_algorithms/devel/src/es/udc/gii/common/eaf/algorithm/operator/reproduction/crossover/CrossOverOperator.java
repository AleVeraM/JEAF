/*
 * Copyright (C) 2010 Grupo Integrado de Ingeniería
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package es.udc.gii.common.eaf.algorithm.operator.reproduction.crossover;

import es.udc.gii.common.eaf.algorithm.EvolutionaryAlgorithm;
import es.udc.gii.common.eaf.exception.OperatorException;
import java.util.List;
import es.udc.gii.common.eaf.algorithm.operator.reproduction.ReproductionOperator;
import es.udc.gii.common.eaf.algorithm.population.Individual;
import es.udc.gii.common.eaf.util.ConfWarning;
import es.udc.gii.common.eaf.util.EAFRandom;
import java.util.Arrays;
import org.apache.commons.configuration.Configuration;

/**
 * This abstract class represents a crossover operator.<p>
 *
 * The behavior of a crossover operator is to crossover two selected individuals from the population.<p>
 *
 * The classes that extend this operator will implement the method
 * {@link #crossOver(EvolutionaryAlgorithm algorithm, List<Individual> individuals)}. This method receives
 * a list of individuals and return the children generated by the operator. This method is executed from the method
 * {@link operate(EvolutionaryAlgorithm algorithm, List<Individual> individuals)} for each pair of the individuals
 * of the list.
 *
 * @author Grupo Integrado de Ingeniería (<a href="http://www.gii.udc.es">www.gii.udc.es</a>)
 * @since 1.0
 */
public abstract class CrossOverOperator extends ReproductionOperator {

    private double probability = 60.0;

    public CrossOverOperator() {
    }

    public CrossOverOperator(int probability) {

        this.probability = probability;
    }

    @Override
    public void configure(Configuration conf) {
        if (conf.containsKey("Probability")) {
            this.probability = conf.getDouble("Probability");
        } else {
            ConfWarning w = new ConfWarning("Probability", this.probability);
            w.warn();
        }
    }

    @Override
    public List<Individual> operate(
            EvolutionaryAlgorithm algorithm,
            List<Individual> individuals)
            throws OperatorException {

        if (individuals == null) {
            throw new OperatorException("CrossOver - "
                    + "Empty individuals");
        }

        for (int i = 0; i < individuals.size() / 2; i++) {
            if (this.probability >= EAFRandom.nextDouble() * 100) {
                this.crossOver(algorithm,
                        individuals.subList(i * 2, (i + 1) * 2));
            }
        }

        return individuals;

    }

    /**
     * Performs crossover. <p/>
     *
     * Note to implementors: Since the selection operators are responsible for
     * creating copies of the parents, the list of individuals can be modified
     * by the implementations of this method. In other words, the list of
     * individuals, which are copies of the parents, can be overriden with the
     * generated children.
     * 
     * @param ea
     * @param individuals
     * @return 
     */
    protected abstract List<Individual> crossOver(EvolutionaryAlgorithm ea,
            List<Individual> individuals);

    protected int[] getCrossPoints(boolean initEnd, int nPoints, int max) {

        int[] points;
        int point, i, maxPoints;

        if (max - 1 == nPoints) {
            points = new int[max + 1];
            for (i = 0; i <= max; i++) {
                points[i] = i;
            }
            return points;
        }


        if (initEnd) {

            points = new int[nPoints + 2];
            Arrays.fill(points, Integer.MAX_VALUE);
            points[0] = 0;
            i = 1;
            maxPoints = points.length - 1;

        } else {

            points = new int[nPoints];
            Arrays.fill(points, Integer.MAX_VALUE);
            i = 0;
            maxPoints = points.length;
        }

        while (i < maxPoints) {

            point = (int) Math.round(EAFRandom.nextDouble() * (max - 2));
            if (Arrays.binarySearch(points, point) < 0) {

                points[i] = point;
                i++;
                Arrays.sort(points);
            }


        }

        if (initEnd) {
            points[points.length - 1] = max;
        }


        return points;

    }

    public double getProbability() {
        return this.probability;
    }

    public void setProbability(int probability) {
        this.probability = probability;
    }

    @Override
    public String toString() {

        return "Crossover operator";

    }
}
